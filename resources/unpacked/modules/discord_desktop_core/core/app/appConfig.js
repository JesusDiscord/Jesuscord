"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.hasInit=void 0,exports.init=init;var _autoStart=require("./autoStart"),autoStart=_interopRequireWildcard(_autoStart),_appSettings=require("./appSettings"),_ipcMain=require("./ipcMain"),_ipcMain2=_interopRequireDefault(_ipcMain);function _interopRequireDefault(t){return t&&t.__esModule?t:{default:t}}function _interopRequireWildcard(t){if(t&&t.__esModule)return t;var i={};if(null!=t)for(var e in t)Object.prototype.hasOwnProperty.call(t,e)&&(i[e]=t[e]);return i.default=t,i}const settings=_appSettings.getSettings(),NOOP=()=>{};let hasInit=exports.hasInit=!1;function init(){hasInit?console.warn("appConfig: Has already init! Cancelling init."):(exports.hasInit=hasInit=!0,_ipcMain2.default.on("TOGGLE_MINIMIZE_TO_TRAY",(t,i)=>setMinimizeOnClose(i)),_ipcMain2.default.on("TOGGLE_OPEN_ON_STARTUP",(t,i)=>toggleRunOnStartup(i)),_ipcMain2.default.on("TOGGLE_START_MINIMIZED",(t,i)=>toggleStartMinimized(i)))}function setMinimizeOnClose(t){settings.set("MINIMIZE_TO_TRAY",t)}function toggleRunOnStartup(t){settings.set("OPEN_ON_STARTUP",t),t?autoStart.install(NOOP):autoStart.uninstall(NOOP)}function toggleStartMinimized(t){settings.set("START_MINIMIZED",t),autoStart.isInstalled(t=>{t&&autoStart.install(NOOP)})}