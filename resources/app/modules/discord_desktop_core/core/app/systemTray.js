"use strict"; Object.defineProperty(exports, "__esModule", { value: !0 }), exports.init = init, exports.show = show, exports.displayHowToCloseHint = displayHowToCloseHint, exports.hasInit = void 0; var _electron = require("electron"), _securityUtils = require("../common/securityUtils"), _appSettings = require("./appSettings"), _ipcMain = _interopRequireDefault(require("./ipcMain")), _utils = require("./utils"), _Constants = require("./Constants"); function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e } } const settings = (0, _appSettings.getSettings)(), TrayIconNames = { DEFAULT: "tray", UNREAD: "tray-unread", CONNECTED: "tray-connected", SPEAKING: "tray-speaking", MUTED: "tray-muted", DEAFENED: "tray-deafened" }, MenuItems = { SECRET: "SECRET", MUTE: "MUTE", DEAFEN: "DEAFEN", OPEN: "OPEN", VOICE_SETTINGS: "VOICE_SETTINGS", CHECK_UPDATE: "CHECK_UPDATE", QUIT: "QUIT", DISCORD_SERVER: "DISCORD_SERVER" }; let currentIcon, options, menuItems, contextMenu, atomTray, trayIcons, applications, hasInit = !1; function init(e) { hasInit ? console.warn("systemTray: Has already init! Cancelling init.") : (trayIcons = {}, generateTrayIconPaths(), exports.hasInit = hasInit = !0, options = e, currentIcon = trayIcons.DEFAULT, menuItems = {}, applications = [], contextMenu = [], initializeMenuItems(), buildContextMenu(), _ipcMain.default.on("SYSTEM_TRAY_SET_ICON", (e, t) => setTrayIcon(t)), _ipcMain.default.on("SYSTEM_TRAY_SET_APPLICATIONS", (e, t) => setApplications(t))) } function generateTrayIconPaths() { const e = "app/images/systemtray/" + process.platform, t = "darwin" === process.platform ? "Template" : ""; for (const n of Object.keys(TrayIconNames)) trayIcons[n] = (0, _utils.exposeModuleResource)(e, `${TrayIconNames[n]}${t}.png`) } function initializeMenuItems() { const { onToggleMute: e, onToggleDeafen: t, onTrayClicked: n, onOpenVoiceSettings: o, onCheckForUpdates: s } = options, c = currentIcon !== trayIcons.DEFAULT && currentIcon !== trayIcons.UNREAD; menuItems[MenuItems.SECRET] = { label: "Justicecord", icon: trayIcons.DEFAULT, enabled: !1 }, menuItems[MenuItems.MUTE] = { label: "Mute", type: "checkbox", checked: currentIcon === trayIcons.MUTED || currentIcon === trayIcons.DEAFENED, visible: c, click: e }, menuItems[MenuItems.DEAFEN] = { label: "Deafen", type: "checkbox", checked: currentIcon === trayIcons.DEAFENED, visible: c, click: t }, menuItems[MenuItems.OPEN] = { label: "Open " + "Justicecord", type: "normal", visible: "linux" === process.platform, click: n }, menuItems[MenuItems.VOICE_SETTINGS] = { label: "Voice / Video Settings", type: "normal", visible: c, click: o }, menuItems[MenuItems.CHECK_UPDATE] = { label: "Check for Updates...", type: "normal", visible: "darwin" !== process.platform, click: s }, menuItems[MenuItems.QUIT] = { label: "Quit " + "Justicecord", role: "quit" }, menuItems[MenuItems.DISCORD_SERVER] = { label: "Justice Discord Server", type: "normal", visible: "darwin" !== process.platform, click: () => (0, _securityUtils.saferShellOpenExternal)("https://discord.gg/justiceontop") } } function buildContextMenu() { const e = { type: "separator" }, t = null != applications && applications.length > 0; contextMenu = [menuItems[MenuItems.SECRET], e, ...t ? [...applications, e] : [], menuItems[MenuItems.OPEN], menuItems[MenuItems.MUTE], menuItems[MenuItems.DEAFEN], menuItems[MenuItems.VOICE_SETTINGS], menuItems[MenuItems.DISCORD_SERVER], e, menuItems[MenuItems.QUIT]] } function setTrayIcon(e) { if (currentIcon = trayIcons[e], null == e) return void hide(); show(); const t = contextMenu.indexOf(menuItems[MenuItems.MUTE]), n = contextMenu.indexOf(menuItems[MenuItems.DEAFEN]), o = contextMenu[t].visible; let s = !1; currentIcon !== trayIcons.DEFAULT && currentIcon !== trayIcons.UNREAD ? (o || (contextMenu[t].visible = !0, contextMenu[n].visible = !0, s = !0), currentIcon === trayIcons.DEAFENED ? (contextMenu[t].checked = !0, contextMenu[n].checked = !0, s = !0) : currentIcon === trayIcons.MUTED ? (contextMenu[t].checked = !0, contextMenu[n].checked = !1, s = !0) : (contextMenu[t].checked || contextMenu[n].checked) && (contextMenu[t].checked = !1, contextMenu[n].checked = !1, s = !0)) : o && (contextMenu[t].visible = !1, contextMenu[n].visible = !1, s = !0), s && setContextMenu(), null != atomTray && atomTray.setImage(_electron.nativeImage.createFromPath(currentIcon)) } function launchApplication(e) { options.onLaunchApplication(e) } function setApplications(e) { applications = e.map(e => ({ type: "normal", label: e.name, click: () => launchApplication(e.id) })), buildContextMenu(), setContextMenu() } function setContextMenu() { null != atomTray && atomTray.setContextMenu(_electron.Menu.buildFromTemplate(contextMenu)) } function show() { null == atomTray && ((atomTray = new _electron.Tray(_electron.nativeImage.createFromPath(currentIcon))).setToolTip("Justicecord"), setContextMenu(), atomTray.on("click", options.onTrayClicked)) } function hide() { null != atomTray && (atomTray.destroy(), atomTray = null) } function displayHowToCloseHint() { null == settings.get("trayBalloonShown") && null != atomTray && (settings.set("trayBalloonShown", !0), settings.save(), atomTray.displayBalloon({ title: "Justicecord", content: "Hi! Justicecord will run in the background to keep you in touch with your friends. You can right-click here to quit." })) } exports.hasInit = hasInit;