"use strict";const electron=require("electron"),fs=require("fs"),os=require("os"),path=require("path"),originalFs=require("original-fs"),util=require("util"),{getPath:getPath}=require("./app"),{getElectronMajorVersion:getElectronMajorVersion}=require("../../../common/processUtils"),{FILE_MANAGER_GET_MODULE_PATH:FILE_MANAGER_GET_MODULE_PATH,FILE_MANAGER_GET_MODULE_DATA_PATH_SYNC:FILE_MANAGER_GET_MODULE_DATA_PATH_SYNC,FILE_MANAGER_SHOW_SAVE_DIALOG:FILE_MANAGER_SHOW_SAVE_DIALOG,FILE_MANAGER_SHOW_OPEN_DIALOG:FILE_MANAGER_SHOW_OPEN_DIALOG,FILE_MANAGER_SHOW_ITEM_IN_FOLDER:FILE_MANAGER_SHOW_ITEM_IN_FOLDER}=require("../common/constants").IPCEvents,INVALID_FILENAME_CHAR_REGEX=/[^a-zA-Z0-9-_.]/g,readdir=util.promisify(originalFs.readdir);async function saveWithDialog(e,t){if(INVALID_FILENAME_CHAR_REGEX.test(t))throw new Error("fileName has invalid characters");const i=path.join(await getPath("downloads"),t),a=await electron.ipcRenderer.invoke(FILE_MANAGER_SHOW_SAVE_DIALOG,{defaultPath:i});a&&a.filePath&&fs.writeFileSync(a.filePath,e)}async function showOpenDialog({filters:e,properties:t}){return(await electron.ipcRenderer.invoke(FILE_MANAGER_SHOW_OPEN_DIALOG,{filters:e,properties:t})).filePaths}function getTimes(e){return Promise.allSettled(e.map(e=>new Promise((t,i)=>{originalFs.stat(e,(a,r)=>a?i(a):r.isFile()?t({filename:e,mtime:r.mtime}):i(new Error("Not a file")))})))}async function orderedFiles(e){try{const t=await readdir(e);return(await getTimes(t.map(t=>path.join(e,t)))).filter(e=>"fulfilled"===e.status).map(e=>e.value).sort((e,t)=>t.mtime.getTime()-e.mtime.getTime()).map(e=>e.filename)}catch(e){return[]}}async function readLogFiles(e){const t=await getModulePath(),i=[path.join(t,"discord_voice","discord-webrtc_0"),path.join(t,"discord_voice","discord-webrtc_1"),path.join(t,"discord_voice","discord-last-webrtc_0"),path.join(t,"discord_voice","discord-last-webrtc_1"),path.join(t,"discord_hook","hook.log"),path.join(t,"discord_voice","audio_state.json")],a=getElectronMajorVersion()<9?path.join(os.tmpdir(),"Discord Crashes"):await getPath("crashDumps"),r="win32"===process.platform?path.join(a,"reports"):path.join(a,"completed"),o=await orderedFiles(r);o.length>0&&i.push(o[0]);return(await readFiles(i,e)).filter(e=>"fulfilled"===e.status).map(e=>e.value)}async function showItemInFolder(e){electron.ipcRenderer.invoke(FILE_MANAGER_SHOW_ITEM_IN_FOLDER,e)}async function openFiles(e,t){const i=await showOpenDialog(e);if(null==i)return;const a=await readFiles(i,t);return a.forEach(e=>{if("rejected"===e.status)throw e.reason}),a.map(e=>e.value)}function readFiles(e,t){return Promise.allSettled(e.map(e=>new Promise((i,a)=>{originalFs.stat(e,(r,o)=>r?a(r):o.size>t?a({code:"ETOOLARGE",message:"upload too large"}):void originalFs.readFile(e,(t,r)=>t?a(t):i({data:r.buffer,filename:path.basename(e)})))})))}async function getModulePath(){return electron.ipcRenderer.invoke(FILE_MANAGER_GET_MODULE_PATH)}function getModuleDataPathSync(){return electron.ipcRenderer.sendSync(FILE_MANAGER_GET_MODULE_DATA_PATH_SYNC)}module.exports={readLogFiles:readLogFiles,saveWithDialog:saveWithDialog,openFiles:openFiles,showOpenDialog:showOpenDialog,showItemInFolder:showItemInFolder,getModulePath:getModulePath,getModuleDataPathSync:getModuleDataPathSync,extname:path.extname,basename:path.basename,dirname:path.dirname,join:path.join};