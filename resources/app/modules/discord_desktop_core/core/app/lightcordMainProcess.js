"use strict"; const electron = require("electron"), { setBlurType: setBlurType, setVibrancy: setVibrancy, getMainWindowId: getMainWindowId, events: events } = require("./mainScreen"), appSettings = require("./appSettings"), UserAgent = electron.session.defaultSession.getUserAgent(); electron.ipcMain.on("LIGHTCORD_GET_USER_AGENT", e => { e.returnValue = UserAgent }), electron.ipcMain.on("LIGHTCORD_SET_USER_AGENT", (e, n) => { electron.BrowserWindow.fromId(getMainWindowId()).webContents.userAgent = n, e.returnValue = null }), electron.ipcMain.handle("LIGHTCORD_SET_BLUR_TYPE", async (e, n) => { setBlurType(n) }), electron.ipcMain.handle("LIGHTCORD_SET_VIBRANCY", async (e, n) => { setVibrancy(n) }), electron.ipcMain.on("LIGHTCORD_GET_APP_PATH", e => { e.returnValue = electron.app.getAppPath() }), electron.ipcMain.on("LIGHTCORD_GET_PATH", (e, n) => { e.returnValue = electron.app.getPath(n) }), electron.ipcMain.on("LIGHTCORD_GET_BUILD_INFOS", e => { e.returnValue = global.BuildInfo }), electron.ipcMain.on("LIGHTCORD_OPEN_EXTERNAL", (e, n) => { try { const t = new URL(n); if (!["http:", "https:"].includes(t.protocol)) return !1; electron.shell.openExternal(n), e.returnValue = !0 } catch (n) { console.error(n), e.returnValue = !1 } }), electron.ipcMain.on("LIGHTCORD_SET_ALWAYS_ON_TOP", (e, n) => { if ("boolean" != typeof n) throw new TypeError("Incorrect value: enabled should be typeof boolean."); const t = electron.BrowserWindow.fromId(getMainWindowId()); t && (t.setAlwaysOnTop(n), e.returnValue = null) }), electron.ipcMain.on("LIGHTCORD_GET_BROWSERWINDOW_ID", e => { e.returnValue = getMainWindowId() }), electron.ipcMain.on("LIGHTCORD_GET_WEBCONTENTS_ID", e => { e.returnValue = electron.BrowserWindow.fromId(getMainWindowId()).webContents.id }), electron.ipcMain.on("LIGHTCORD_GET_SETTINGS", e => { e.returnValue = appSettings.getSettings().settings }), electron.ipcMain.on("LIGHTCORD_SET_SETTING", (e, n, t) => { appSettings.getSettings().set(n, t), e.returnValue = null }), electron.ipcMain.on("LIGHTCORD_DELETE_SETTING", (e, n) => { appSettings.getSettings().delete(n), e.returnValue = null }), electron.ipcMain.on("LIGHTCORD_SAVE_SETTINGS", e => { appSettings.getSettings().save(), e.returnValue = null }), electron.ipcMain.on("LIGHTCORD_REMOVE_DEVTOOLS_EXTENSION", (e, n) => { electron.session.defaultSession.removeExtension(n), e.returnValue = null }), electron.ipcMain.on("LIGHTCORD_ADD_DEVTOOLS_EXTENSION", async (e, n) => { try { e.returnValue = !0 } catch (n) { console.error(n), e.returnValue = !1 } }), electron.ipcMain.on("LIGHTCORD_RELAUNCH_APP", (e, n) => { electron.app.relaunch(n), electron.app.quit(), e.returnValue = null }), electron.ipcMain.on("LIGHTCORD_GET_IS_DEVTOOLS_OPEN", e => { e.returnValue = electron.BrowserWindow.fromId(getMainWindowId()).webContents.isDevToolsOpened() }), electron.session.defaultSession.webRequest.onBeforeRequest((e, n) => /api\/v\d+\/science$/g.test(e.url) ? n({ cancel: !0 }) : n({})), events.on("ready", () => { const e = electron.BrowserWindow.fromId(getMainWindowId()).webContents; e.on("devtools-opened", () => { e.send("LIGHTCORD_DEVTOOLS_OPEN") }) });